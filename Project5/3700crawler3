#!/usr/bin/env python3

import argparse
import socket
import ssl

DEFAULT_SERVER = "proj5.3700.network"
DEFAULT_PORT = 443
CODE_SUCCESS = 200
CODE_REDIRECT = 302
CODE_FORBIDDEN = 403
CODE_NOFOUND = 404
CODE_INTERNALERR = 503

CSRF_LEN = 64
COOKIE_LEN = 32

class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password
        self.socket = None
        self.csrf_token = None
        self.session_id = None

        self.frontier = set()
        self.log = set()
        self.flags = set()
        

    def initSocket(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket = ssl.wrap_socket(self.socket)
        self.socket.connect((self.server, self.port))

    def getResp(self):
        response = ''
        while True:
            data = self.socket.recv(10000)
            if data:
                response += data.decode('ascii')
            else:
                break
        return response

    def getStatusCode(self, response):
        return int(response.split('\r\n')[0].split()[1])

    def requetGET(self, url):
        self.initSocket()
        request = 'GET {} HTTP/1.1\r\n'
        request += 'Host: {}\r\n'
        request += 'Connection: close\r\n'
        request+= 'Cookie: csrftoken={}; sessionid={}\r\n\r\n' if self.session_id else '\r\n'
        request = request.format(url, self.server, self.csrf_token, self.session_id)
        self.socket.send(request.encode('ascii'))
        response = self.getResp()
        self.csrf_token, self.session_id = self.getSessionInfo(response)
        return None if self.getStatusCode(response) == CODE_NOFOUND else response
    
    def getSessionInfo(self, response):
        session_id_anchor = "sessionid="
        session_id = response[response.index(session_id_anchor) + len(session_id_anchor):][:COOKIE_LEN]

        csrf_token_anchor = "csrftoken="
        csrf_token = response[response.index(csrf_token_anchor) + len(csrf_token_anchor):][:CSRF_LEN]
        return csrf_token, session_id

    def login(self):

        # Obtain session info via GET
        response = self.requetGET('/accounts/login/?next=/fakebook/')
        assert(response)
        status = self.getStatusCode(response)
        if status == CODE_INTERNALERR:
            return self.login()
        cmw_anchor = '"csrfmiddlewaretoken" value="'
        cmw_token = response[response.index(cmw_anchor) + len(cmw_anchor):][:CSRF_LEN]


        # Log in as a new session  
        self.initSocket()
        body = "username={}&password={}&csrfmiddlewaretoken={}&next=/fakebook/"
        body = body.format(self.username, self.password, cmw_token)
        header = "POST /accounts/login/?next=/fakebook/ HTTP/1.1\r\n"
        header += "Host: {}\r\n"
        header += "Cookie: csrftoken={}; sessionid={}\r\n"
        header += "Content-type: application/x-www-form-urlencoded\r\n"
        header += "Content-length: {}\r\n"
        header += "Connection: close\r\n\r\n"
        header = header.format(self.server, self.csrf_token, self.session_id, len(body))
        request = header + body
        self.socket.send(request.encode('ascii'))
        response = self.getResp()
        self.csrf_token, self.session_id = self.getSessionInfo(response)
        status = self.getStatusCode(response)
        if status == CODE_INTERNALERR:
            return self.login()
        elif status != CODE_REDIRECT:
            exit(0)

        # handle redirection
        redirection_anchor = 'Location:'
        redirection = response[response.index(redirection_anchor) + len(redirection_anchor):]
        redirection = redirection[:redirection.index('\r\n')]
        response = self.requetGET(redirection)

        # return the redirected landing page (home)
        return response

    def run(self):
        home = self.login()
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()